// Generated by CoffeeScript 1.8.0
(function() {
  var PLUGIN_NAME, PluginError, gutil, scoop, through,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  through = require('through2');

  gutil = require('gulp-util');

  PluginError = gutil.PluginError;

  PLUGIN_NAME = 'gulp-scoop';

  scoop = function(prefixText) {
    var Tag, stream;
    if (!prefixText) {
      throw new PluginError(PLUGIN_NAME, 'Missing prefix text!');
    }
    prefixText = new Buffer(prefixText);
    Tag = (function() {
      function Tag(slug) {
        this.slug = slug;
        this.error = __bind(this.error, this);
        this.replaceInString = __bind(this.replaceInString, this);
        this.generatePHP = __bind(this.generatePHP, this);
        console.log("Slug: " + this.slug);
      }

      Tag.prototype.generatePHP = function() {
        return console.log('<?php the_field("' + this.slug + '"); ?>');
      };

      Tag.prototype.replaceInString = function(string) {
        var newString;
        newString = string.replace('{{' + this.slug + '}}', '<?php the_field("' + this.slug + '"); ?>');
        return newString;
      };

      Tag.prototype.error = function() {
        return console.log("Error: Undefined Property");
      };

      return Tag;

    })();
    stream = through.obj(function(file, enc, cb) {
      var generateTag, matches, pre, tag, _i, _len;
      if (file.isStream()) {
        this.emit('error', new PluginError(PLUGIN_NAME, 'Streams are not supported!'));
        return cb();
      }
      if (file.isBuffer()) {
        file.clone;
        pre = file.contents.toString();
        matches = pre.match(/[^{{\]]+(?=}})/g);
        generateTag = function(tag, string, callback) {
          var newString, tagObj;
          tagObj = new Tag(tag);
          newString = tagObj.replaceInString(string);
          console.log(newString);
          pre = newString;
          return callback();
        };
        for (_i = 0, _len = matches.length; _i < _len; _i++) {
          tag = matches[_i];
          generateTag(tag, pre, function() {
            console.log("pre: " + pre);
            return file.contents = new Buffer(pre);
          });
        }
      }
      this.push(file);
      return cb();
    });
    return stream;
  };

  module.exports = scoop;

}).call(this);
